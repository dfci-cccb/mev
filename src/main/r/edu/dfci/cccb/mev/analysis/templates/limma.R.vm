library(limma)

## NOTE
## Performs limma on a data matrix 
## Input two files: 1) data matrix; 2) Sample definition matrix
## Sample definition matrix contains sample number and status (tab delim)
## Status 1 = Experiment
## Status 0 = Control
## Status -1= Not included in analysis
##
## Data Matrix Assumption
## 
## 1) No "\'" in the input data file
## 2) All NaN is converted in NA
##
## DATE: 9.30.2013
## Author: Yaoyu
##
##

## definte limma function
run.limma<-function(in.mtx, Experiment=NA, Control=NA){
    
  CurrMtx=in.mtx
  CurrMtx=in.mtx[,Experiment]
  
  CurrMtx=cbind(CurrMtx, in.mtx[,Control])
  
  Tissue=array(NA, dim=c(1,length(colnames(CurrMtx))))
  Tissue[1:length(Experiment)]="Experiment"
  Tissue[(length(Experiment)+1):length(colnames(CurrMtx))]="Control"
  
  Tissue=factor(Tissue,levels=c("Experiment","Control"))
  design=model.matrix(~0+Tissue)
  colnames(design)=c("Experiment", "Control")
  
  fit<-lmFit(CurrMtx, design)
  efit<-eBayes(fit)
  
  contrast.matrix=makeContrasts(ExpvsContr=Experiment-Control, levels=design)
  fit<-eBayes(contrasts.fit(fit, contrast.matrix[,"ExpvsContr"]))
  result_full=topTable(fit, adjust="fdr", number=dim(CurrMtx)[1])
  return(result_full)
}   

##
## INPUT FILENAMES 
INFILE="$input"
SAMPLE_FILE="$configuration"

## OUTPUT FILESNAME
RESULT_OUT="$output"
SIGGENE_OUT="$significant"
RNK_OUT="$rnk"

##
## read files
in.mtx=read.table(INFILE, header=TRUE, sep="\t", nrow=-1)

##
## Assume the file starts with \t and the first column is gene id
rownames(in.mtx)=in.mtx[,1]
in.mtx=na.omit(in.mtx[,-1])
in.mtx=data.matrix(in.mtx)

## Check to determine if matrix contains negative values
## off set the matrix to operate in positive values for limma
## starting with 0
in.mtx=if(min(in.mtx)<0){in.mtx+min(in.mtx)*-1}else{in.mtx}

## Assign group
sample.mtx=read.table(SAMPLE_FILE, header=FALSE, sep="\t")
EXP=sample.mtx[(sample.mtx[,2]==1),1]
CON=sample.mtx[(sample.mtx[2]==0),1]

##
##  Run limma
result=run.limma(in.mtx,
  Experiment=EXP,
  Control=CON)

##
## reassign colnames
colnames(result)=c("ID", "Log Fold Change", "Average Expression", "t", "P-value", "q-value", "B")

##
## write rnk file
gsea_rnk <-result[,c("ID", "t")]
write.table(gsea_rnk, file=RNK_OUT, quote=FALSE, sep="\t", row.names=FALSE, col.names=FALSE)

##
## write full result file
colnames(result)[1]=""
write.table(result[,-c(4,7)], 
            file=RESULT_OUT, quote=FALSE, sep="\t", row.names=FALSE, col.names=TRUE)

##
## Define Significant gene expression
q.thresh=0.2
logfc.thresh=1.2

##
## write Significant gene set
result.sig=result[result[,"q-value"]<q.thresh && result[,"Log Fold Change"]>logfc.thresh,]
write.table(result.sig[,-c(4,7)], 
            file=SIGGENE_OUT, quote=FALSE, sep="\t", row.names=FALSE, col.names=TRUE)

